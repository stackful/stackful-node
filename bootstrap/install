#!/usr/bin/env python

from __future__ import absolute_import, division, print_function, unicode_literals

import sys, os, platform
import subprocess
import functools


# Easy on the wrists
def run(cmd, cwd=None):
    return subprocess.check_call(cmd, cwd=cwd, shell=True)


def retry_commands(action, retries=1):
    for i in range(0, retries):
        try:
            result = action()
            return result
        except subprocess.CalledProcessError:
            # Scream if it's our last attempt
            if i >= retries - 1:
                raise


def read_text(file_path):
    with open(file_path, "r") as f:
        return f.read()


def message(msg):
    print(msg)
    sys.stdout.flush()
    with open(summary_file, "a+") as f:
        f.write(msg)
        f.write("\n")


def git_clone(retries=1):
    def action():
        run("rm -rf '{}'".format(stack_source))
        run("git clone '{repo}' '{dir}'".format(repo=stack_repo, dir=stack_source))
    retry_commands(action, retries)


def git_submodule_update(retries=1):
    def action():
        run_stack("git submodule update --init")
    retry_commands(action, retries)


#reset summary file
user_home = os.getenv("HOME")
summary_file = os.path.join(user_home, "stackful-node-summary.txt")
run("rm -f '{}'".format(summary_file))

stack_repo = "https://github.com/stackful/stackful-node.git"
stack_source = "/tmp/stackful-node"
run_stack = functools.partial(run, cwd=stack_source)

# reset stack configuration
config_dir = os.path.join("/etc", "stackful")
run("mkdir -p '{}'".format(config_dir))
config_file = os.path.join(config_dir, "stackful-node.json")

message("Checking if OS/Distro is supported...")
distro, version, _ = platform.dist()
os_supported = distro == "Ubuntu" and (version == "12.04" or version == "12.10")
if not os_supported:
    message("Unsupported OS/distro. Supported: Ubuntu 12.04, Ubuntu 12.10")
    sys.exit(255)

message("Installing prerequisite packages...")
run("DEBIAN_FRONTEND=noninteractive apt-get update --yes")
run("DEBIAN_FRONTEND=noninteractive apt-get install --yes dialog git")


message("Fetching stack files from {} ...".format(stack_repo))

git_clone(retries=5)
git_submodule_update(retries=5)


message("Setting up Git deploy user...")
run_stack("./bootstrap/install-git-repo")


chef_installed = False
try:
    chef_location = subprocess.check_output("which chef-solo", shell=True)
    message("Opscode Chef already installed at '{}'".format(chef_location.strip()))
    chef_installed = True
except subprocess.CalledProcessError:
    pass

if not chef_installed:
    message("Installing Opscode Chef...")
    run("curl -L https://www.opscode.com/chef/install.sh | bash")

message("Finishing stack installation...")
run_stack("./run")

print("INSTALLATION SUMMARY (also saved to ~/stackful-node-summary.txt):\n")
run("cat ~/stackful-node-summary.txt")
